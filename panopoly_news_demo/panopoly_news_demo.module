<?php
/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * 
 * @return [type] [description]
 */
function panopoly_news_demo_menu(){
  $items['admin/content/remove-demo-content/panopoly-news'] = array(
    'title' => 'Remove Panopoly News demo content',
    'page callback' => 'panopoly_news_demo_disable_demo',
    'page arguments' => array('admin/content'),
    'access arguments' => array('administer features'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['news/remove-demo-content/panopoly-news'] = array(
    'title' => 'Remove Panopoly News demo content',
    'page callback' => 'panopoly_news_demo_disable_demo',
    'page arguments' => array('news'),
    'access arguments' => array('administer features'),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

function panopoly_news_demo_disable_demo($redirect_path){
	//Disable the module (and thus the content)
	module_disable(array('panopoly_news_demo'));

	//Clear the menu cache
	menu_rebuild();

	//Set an informative message
	drupal_set_message(t('The Panopoly News demo content has been disabled.'));

	//Reload the admin content page
	drupal_goto($redirect_path);
}

function panopoly_news_demo_modules_installed($modules){
	if(in_array('panopoly_news_demo', $modules)){
		features_rebuild();
  	$author_role = user_role_load_by_name('panopoly news author');
    module_load_include('inc', 'devel_generate');

    $defaultcontent_nodes = panopoly_news_demo_get_defaultcontent('panopoly_news_demo');

    //Get vocabulary object
    $vocabularies = taxonomy_vocabulary_get_names();
    $vid = $vocabularies['panopoly_news_topics']->vid;
    $vocab = taxonomy_vocabulary_load($vid); 

    //Generate some terms
    $terms = devel_generate_terms(10, array($vid => $vocab), 10);
    $term_ids = array();
    foreach($terms as $term_name){
      $term_matches = taxonomy_get_term_by_name($term_name, $vocab->machine_name);
      $term = array_pop($term_matches);
      $term->field_panopoly_news_demo_content['und'][0]['value'] = TRUE;
      taxonomy_term_save($term);
      $term_ids[] = $term->tid;
    }
    foreach($defaultcontent_nodes as $node){
      //Generate author user
      devel_create_users(1, FALSE, 31556926, array($author_role->rid));

      //Grab this user and assign them to the node
      $newest_user_uid = panopoly_news_demo_get_latest_uid();
      $account = user_load($newest_user_uid);
      $account->field_panopoly_news_demo_content['und'][0]['value'] = TRUE;
      $node->uid = $newest_user_uid;
      user_save($account);

      //Assign random terms to the nodes
      $random_terms = panopoly_news_demo_get_random_terms($term_ids);
      foreach($random_terms as $tid){
        $node->field_panopoly_news_tags['und'][] = array('tid' => $tid);
      }
      node_save($node); 
    }
  } 		
}

/**
 * Given an array of tids, return an array of random length
 * containing some of them.
 * 
 * @param  [type] $term_ids [description]
 * @return [type]           [description]
 */
function panopoly_news_demo_get_random_terms($term_ids){
	$size = count($term_ids);
	$number_returned_tids = rand(1, $size);
	$random_tids = array_random_assoc($term_ids, $number_returned_tids);
	return $random_tids;
}

function array_random_assoc($arr, $num = 1) {
    $keys = array_keys($arr);
    shuffle($keys);

    $r = array();
    for ($i = 0; $i < $num; $i++) {
        $r[$keys[$i]] = $arr[$keys[$i]];
    }
    return $r;
}


/**
 * Get all (node) defaultcontent in $feature_name.
 *
 * @return [type] [description]
 */
function panopoly_news_demo_get_defaultcontent($feature_name){
	if(module_load_include('inc', $feature_name, $feature_name . '.features.content')){
		$defaultcontent_nodes = array();
		//Load all the featurized pieces of defaultcontent
		$content_defaults_function = $feature_name . '_content_defaults';
	  $components = $content_defaults_function();
	  usort($components, 'defaultcontent_import_sort');

	  //Load all the defaultcontent
	  if (!empty($components)) {
	    foreach ($components as $component) {
	      if ($nid = defaultcontent_get_default($component->machine_name)) {
	        $node = node_load($nid);
	        $defaultcontent_nodes[] = $node;
	      }else{
          defaultcontent_import_node($component);
          $nid = defaultcontent_get_default($component->machine_name);
	        $node = node_load($nid);
	        $defaultcontent_nodes[] = $node;
        }
	    }
	  }
	  return $defaultcontent_nodes;
	}
}

/**
 * Get all demo content of $entity_type
 * 
 * @return [type] [description]
 */
function panopoly_news_demo_get_demo_content($entity_type){
	$field_info = field_info_field('field_panopoly_news_demo_content');
	if(!empty($field_info['bundles'])){
		$query = new EntityFieldQuery();
		$result = $query->entityCondition('entity_type', $entity_type)
		->fieldCondition('field_panopoly_news_demo_content', 'value', 1, '=')
		->execute();

		return $result;
	}else{
		return FALSE;
	}
}

function panopoly_news_demo_get_latest_uid(){
	$result = db_query("select * from {users} order by uid desc limit 1");
	foreach($result as $row){
		$uid = $row->uid;
	}
	return $uid;
}

/**
 * Delete all demo content of $entity_type
 * 
 * @param  [type] $entity_type [description]
 * @return [type]              [description]
 */
function panopoly_news_demo_delete_demo_content($entity_type){
	if($eid_results = panopoly_news_demo_get_demo_content($entity_type)){
		$eids = array_keys($eid_results[$entity_type]);
		foreach($eids as $eid){
			entity_delete($entity_type, $eid);	
		}
	}
}

/**
 * @todo: REMOVE
 */
function panopoly_news_demo_export_demo_content() {
	$users_export = array();
	$terms_export = array();

	//Find all the users with an exportable uuid
	$user_query = new EntityFieldQuery();
	$user_result = $user_query->entityCondition('entity_type', 'user')
	->fieldCondition('field_panopoly_news_demo_content', 'value', NULL, 'IS NOT NULL')
	->execute();

	//Find all the taxonomy_terms with an exportable uuid
	$term_query = new EntityFieldQuery();
	$term_result = $term_query->entityCondition('entity_type', 'taxonomy_term')
	->fieldCondition('field_panopoly_news_demo_content', 'value', NULL, 'IS NOT NULL')
	->execute();


	//Save all the users as serialized strings within a file
	$user_entities = entity_load('user', array_keys($user_result['user']));
	print_r($user_entities);
	foreach($user_entities as $user_entity){
	 	$exported_user = entity_export('user', $user_entity);
	 	print_r(get_class_methods($user_entity));
		//Save its exported format in the array
		$users_export[] = $exported_user;
	}

	$term_entities = entity_load('taxonomy_term', array_keys($term_result['taxonomy_term']));
	foreach($term_entities as $term_entity){
	 	$exported_term = entity_export('taxonomy_term', $term_entity);

		//Save its exported format in the array
		$terms_export[] = $exported_term;
	}

	$export = array_merge($users_export, $terms_export);

	print_r($export);
}
