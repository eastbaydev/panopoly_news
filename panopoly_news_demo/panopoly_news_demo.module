<?php

/**
 *
 * This code is largely a work-around to provide users and
 * terms for defaultcontent-generated nodes.
 *
 * @TODO: In the future, I would prefer to extend defaultcontent or
 * use a different content-deployment strategy to fulfill this functionality.
 */

/**
 * Insert some well-placed links so users may remove the demo content,
 * aka, disable the module.
 *
 * Implements hook_menu()
 *
 * @return array
 */
function panopoly_news_demo_menu() {
	$items['admin/content/remove-demo-content/panopoly-news'] = array(
	    'title' => 'Remove Panopoly News demo content',
	    'page callback' => 'panopoly_news_demo_disable_demo',
	    'page arguments' => array('admin/content'),
	    'access arguments' => array('administer features'),
	    'type' => MENU_LOCAL_ACTION,
	);
	$items['news/remove-demo-content/panopoly-news'] = array(
	    'title' => 'Remove Panopoly News demo content',
	    'page callback' => 'panopoly_news_demo_disable_demo',
	    'page arguments' => array('news'),
	    'access arguments' => array('administer features'),
	    'type' => MENU_LOCAL_ACTION,
	);
	$items['admin/people/remove-demo-content/panopoly-news'] = array(
	    'title' => 'Remove Panopoly News demo content',
	    'page callback' => 'panopoly_news_demo_disable_demo',
	    'page arguments' => array('admin/people'),
	    'access arguments' => array('administer features'),
	    'type' => MENU_LOCAL_ACTION,
	);


	return $items;
}

/**
 * Convenient page callback to disable panopoly_news_demo.
 *
 * @param <type> $redirect_path
 */
function panopoly_news_demo_disable_demo($redirect_path) {
	//Disable the module (and thus the content)
	module_disable(array('panopoly_news_demo'));

	//Clear the menu cache
	menu_rebuild();

	//Set an informative message
	drupal_set_message(t('The Panopoly News demo content has been disabled.'));

	//Reload the admin content page
	drupal_goto($redirect_path);
}

/**
 * After the panopoly_news_demo feature has been activated, generate some
 * dummy content (users and terms) and attach it to the defaultcontent nodes.
 *
 * Implements hook_modules_installed()
 *
 * @param array $modules
 */
function panopoly_news_demo_modules_enabled($modules) {
	if (in_array('panopoly_news_demo', $modules)) {
		//Make sure defaultcontent has been added
		//@todo: I dislike this hack, check to see if the necessary
		//field has been enabled
		features_rebuild();
		features_revert(array('panopoly_news_demo' => array('field')));

		//Load some necessary info	
		$author_role = user_role_load_by_name('panopoly news author');
		module_load_include('inc', 'devel_generate');

		//Find all the defaultcontent nodes installed
		$defaultcontent_nodes = panopoly_news_demo_get_defaultcontent('panopoly_news_demo');

		//Get vocabulary object
		$vocabularies = taxonomy_vocabulary_get_names();
		$vid = $vocabularies['panopoly_news_topics']->vid;
		$vocab = taxonomy_vocabulary_load($vid);

		//Generate some terms
		$terms = devel_generate_terms(10, array($vid => $vocab), 10);
		$term_ids = array();
		foreach ($terms as $term_name) {
			$term_matches = taxonomy_get_term_by_name($term_name, $vocab->machine_name);
			$term = array_pop($term_matches);
			$term->field_panopoly_news_demo_content['und'][0]['value'] = TRUE;
			taxonomy_term_save($term);
			$term_ids[] = $term->tid;
		}

		//Cycle through all the defaultcontent and attach users/terms
		foreach ($defaultcontent_nodes as $node) {
			//Generate author user
			//@todo: do this in a batch of multiple users?
			devel_create_users(1, FALSE, 31556926, array($author_role->rid));

			//Grab this user and assign them to the node
			$newest_user_uid = panopoly_news_demo_get_latest_uid();
			$account = user_load($newest_user_uid);
			$node->uid = $newest_user_uid;

			//Make sure the user is tagged as demo_content
			$account->field_panopoly_news_demo_content['und'][0]['value'] = TRUE;
			user_save($account);

			//Assign random terms to the nodes
			$random_terms = panopoly_news_demo_get_random_terms($term_ids);
			foreach ($random_terms as $tid) {
				$node->field_panopoly_news_tags['und'][] = array('tid' => $tid);
			}
			node_save($node);
		}
	}
}

/**
 * Given an array of tids, return an array of random length
 * containing some of them.
 * 
 * @param  [type] $term_ids [description]
 * @return [type]           [description]
 */
function panopoly_news_demo_get_random_terms($term_ids) {
	$size = count($term_ids);
	$number_returned_tids = rand(1, $size);
	$random_tids = _array_random_assoc($term_ids, $number_returned_tids);
	return $random_tids;
}

/**
 * Return random values from an associative array.
 *
 * @param array $arr
 * @param int $num
 * @return array
 */
function _array_random_assoc($arr, $num = 1) {
	$keys = array_keys($arr);
	shuffle($keys);

	$r = array();
	for ($i = 0; $i < $num; $i++) {
		$r[$keys[$i]] = $arr[$keys[$i]];
	}
	return $r;
}

/**
 * Get all defaultcontent nodes in $feature_name.
 *
 * @return array An array of nodes.
 */
function panopoly_news_demo_get_defaultcontent($feature_name) {
	if (module_load_include('inc', $feature_name, $feature_name . '.features.content')) {
		$defaultcontent_nodes = array();

		//Load all the featurized pieces of defaultcontent
		$content_defaults_function = $feature_name . '_content_defaults';
		$components = $content_defaults_function();
		usort($components, 'defaultcontent_import_sort');

		//Load all the defaultcontent
		if (!empty($components)) {
			foreach ($components as $component) {
				if ($nid = defaultcontent_get_default($component->machine_name)) {
					//If it has already been inserted into the DB, load it from there
					$node = node_load($nid);
					$defaultcontent_nodes[] = $node;
				} else {
					//Otherwise, import it ourselves
					defaultcontent_import_node($component);
					$nid = defaultcontent_get_default($component->machine_name);
					$node = node_load($nid);
					$defaultcontent_nodes[] = $node;
				}
			}
		}
		return $defaultcontent_nodes;
	}
}

/**
 * Get all demo content (stuff tagged as demo content) of $entity_type
 * 
 * @return array An array of entities or FALSE when the field doesn't exist.
 */
function panopoly_news_demo_get_demo_content($entity_type) {
	//Make sure the field_panopoly_news_demo_content field exists
	$field_info = field_info_field('field_panopoly_news_demo_content');
	if (!empty($field_info['bundles'])) {
		//Query for demo content
		$query = new EntityFieldQuery();
		$result = $query->entityCondition('entity_type', $entity_type)
				->fieldCondition('field_panopoly_news_demo_content', 'value', 1, '=')
				->execute();

		return $result;
	} else {
		return FALSE;
	}
}

/**
 * Retrieves the last UID in the user table.
 *
 * @TODO: This will not work for all site installs.
 *
 * @return int The last UID in the user table.
 */
function panopoly_news_demo_get_latest_uid() {
	$result = db_query("select * from {users} order by uid desc limit 1");
	foreach ($result as $row) {
		$uid = $row->uid;
	}
	return $uid;
}

/**
 * Delete all demo content of $entity_type
 * 
 * @param  string $entity_type Machine name of the entity type.
 */
function panopoly_news_demo_delete_demo_content($entity_type) {
	if ($eid_results = panopoly_news_demo_get_demo_content($entity_type)) {
		$eids = array_keys($eid_results[$entity_type]);
		foreach ($eids as $eid) {
			entity_delete($entity_type, $eid);
		}
	}
}